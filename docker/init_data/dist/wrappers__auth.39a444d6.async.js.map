{"version":3,"file":"wrappers__auth.39a444d6.async.js","mappings":"0MAKaA,EAAqB,UAAM,CACtC,IAAAC,KAAkDC,EAAAA,iBAAgB,EAACC,EAAAC,EAAAA,EAAAH,EAAA,GAA5DI,EAAsBF,EAAA,GAAEG,EAAeH,EAAA,GACxCI,EAAQF,EAAuBG,IAAI,OAAO,EAC1CC,KAAsCC,EAAAA,SAC1C,kBAAM,IAAIC,gBAAgBN,EAAuBO,SAAS,CAAC,CAAC,EAC5D,CAACP,CAAsB,CACzB,EACMQ,KAAWC,EAAAA,aAAY,EAE7B,GAAIP,EAAO,CACTQ,EAAAA,GAAQR,MAAMA,CAAK,EACnBM,EAAS,QAAQ,EACjBJ,EAAkB,OAAQ,OAAO,EACjCH,EAAgBG,CAAkB,EAClC,OAGF,IAAMO,EAAOX,EAAuBG,IAAI,MAAM,EAE9C,OAAIQ,IACFC,EAAAA,EAAkBC,iBAAiBF,CAAI,EACvCP,EAAkB,OAAQ,MAAM,EAChCH,EAAgBG,CAAkB,GAE7BO,CACT,EAEaG,EAAU,UAAM,CAC3B,IAAMH,EAAOhB,EAAmB,EAChCoB,KAA8BC,EAAAA,UAA4B,IAAI,EAACC,EAAAlB,EAAAA,EAAAgB,EAAA,GAAxDG,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAE1BG,SAAAA,EAAAA,WAAU,UAAM,CACdD,EAAW,CAAC,CAACP,EAAAA,EAAAA,iBAAmC,GAAK,CAAC,CAACD,CAAI,CAC7D,EAAG,CAACA,CAAI,CAAC,EAEF,CAAEO,QAAAA,CAAQ,CACnB,E,WCtCA,EAAe,UAAM,CACnB,IAAAG,EAAoBP,EAAQ,EAApBI,EAAOG,EAAPH,QACR,OAAIA,IAAY,MACPI,EAAAA,KAACC,EAAAA,OAAM,EAAE,EACPL,IAAY,MACdI,EAAAA,KAACE,EAAAA,SAAQ,CAACC,GAAG,QAAQ,CAAE,KAGzBH,EAAAA,KAAAI,EAAAA,SAAA,EAAI,CACb,C","sources":["webpack:///./src/hooks/authHook.ts","webpack:///./src/wrappers/auth.tsx"],"sourcesContent":["import authorizationUtil from '@/utils/authorizationUtil';\nimport { message } from 'antd';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'umi';\n\nexport const useLoginWithGithub = () => {\n  const [currentQueryParameters, setSearchParams] = useSearchParams();\n  const error = currentQueryParameters.get('error');\n  const newQueryParameters: URLSearchParams = useMemo(\n    () => new URLSearchParams(currentQueryParameters.toString()),\n    [currentQueryParameters],\n  );\n  const navigate = useNavigate();\n\n  if (error) {\n    message.error(error);\n    navigate('/login');\n    newQueryParameters.delete('error');\n    setSearchParams(newQueryParameters);\n    return;\n  }\n\n  const auth = currentQueryParameters.get('auth');\n\n  if (auth) {\n    authorizationUtil.setAuthorization(auth);\n    newQueryParameters.delete('auth');\n    setSearchParams(newQueryParameters);\n  }\n  return auth;\n};\n\nexport const useAuth = () => {\n  const auth = useLoginWithGithub();\n  const [isLogin, setIsLogin] = useState<Nullable<boolean>>(null);\n\n  useEffect(() => {\n    setIsLogin(!!authorizationUtil.getAuthorization() || !!auth);\n  }, [auth]);\n\n  return { isLogin };\n};\n","import { useAuth } from '@/hooks/authHook';\r\nimport { Navigate, Outlet } from 'umi';\r\n\r\nexport default () => {\r\n  const { isLogin } = useAuth();\r\n  if (isLogin === true) {\r\n    return <Outlet />;\r\n  } else if (isLogin === false) {\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  return <></>;\r\n};\r\n"],"names":["useLoginWithGithub","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","currentQueryParameters","setSearchParams","error","get","newQueryParameters","useMemo","URLSearchParams","toString","navigate","useNavigate","message","auth","authorizationUtil","setAuthorization","useAuth","_useState","useState","_useState2","isLogin","setIsLogin","useEffect","_useAuth","_jsx","Outlet","Navigate","to","_Fragment"],"sourceRoot":""}